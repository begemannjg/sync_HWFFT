# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sync_fft_swig', [dirname(__file__)])
        except ImportError:
            import _sync_fft_swig
            return _sync_fft_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_sync_fft_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sync_fft_swig = swig_import_helper()
    del swig_import_helper
else:
    import _sync_fft_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _sync_fft_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _sync_fft_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _sync_fft_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _sync_fft_swig.high_res_timer_epoch()
class hwfft(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(fft_size, direction, scale):
        """
        make(int fft_size, bool direction, int scale) -> hwfft_sptr

        Return a shared_ptr to a new instance of sync_fft::hwfft.

        To avoid accidental use of raw pointers, sync_fft::hwfft's constructor is in a private implementation class. sync_fft::hwfft::make is the public interface for creating new instances.

        Params: (fft_size, direction, scale)
        """
        return _sync_fft_swig.hwfft_make(fft_size, direction, scale)

    make = staticmethod(make)
    __swig_destroy__ = _sync_fft_swig.delete_hwfft
    __del__ = lambda self: None
hwfft_swigregister = _sync_fft_swig.hwfft_swigregister
hwfft_swigregister(hwfft)

def hwfft_make(fft_size, direction, scale):
    """
    hwfft_make(int fft_size, bool direction, int scale) -> hwfft_sptr

    Return a shared_ptr to a new instance of sync_fft::hwfft.

    To avoid accidental use of raw pointers, sync_fft::hwfft's constructor is in a private implementation class. sync_fft::hwfft::make is the public interface for creating new instances.

    Params: (fft_size, direction, scale)
    """
    return _sync_fft_swig.hwfft_make(fft_size, direction, scale)

class hwfft_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::sync_fft::hwfft)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::sync_fft::hwfft)> self) -> hwfft_sptr
        __init__(boost::shared_ptr<(gr::sync_fft::hwfft)> self, hwfft p) -> hwfft_sptr
        """
        this = _sync_fft_swig.new_hwfft_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(hwfft_sptr self) -> hwfft"""
        return _sync_fft_swig.hwfft_sptr___deref__(self)

    __swig_destroy__ = _sync_fft_swig.delete_hwfft_sptr
    __del__ = lambda self: None

    def make(self, fft_size, direction, scale):
        """
        make(hwfft_sptr self, int fft_size, bool direction, int scale) -> hwfft_sptr

        Return a shared_ptr to a new instance of sync_fft::hwfft.

        To avoid accidental use of raw pointers, sync_fft::hwfft's constructor is in a private implementation class. sync_fft::hwfft::make is the public interface for creating new instances.

        Params: (fft_size, direction, scale)
        """
        return _sync_fft_swig.hwfft_sptr_make(self, fft_size, direction, scale)


    def history(self):
        """history(hwfft_sptr self) -> unsigned int"""
        return _sync_fft_swig.hwfft_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(hwfft_sptr self, int which, int delay)
        declare_sample_delay(hwfft_sptr self, unsigned int delay)
        """
        return _sync_fft_swig.hwfft_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(hwfft_sptr self, int which) -> unsigned int"""
        return _sync_fft_swig.hwfft_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(hwfft_sptr self) -> int"""
        return _sync_fft_swig.hwfft_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(hwfft_sptr self) -> double"""
        return _sync_fft_swig.hwfft_sptr_relative_rate(self)


    def start(self):
        """start(hwfft_sptr self) -> bool"""
        return _sync_fft_swig.hwfft_sptr_start(self)


    def stop(self):
        """stop(hwfft_sptr self) -> bool"""
        return _sync_fft_swig.hwfft_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(hwfft_sptr self, unsigned int which_input) -> uint64_t"""
        return _sync_fft_swig.hwfft_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(hwfft_sptr self, unsigned int which_output) -> uint64_t"""
        return _sync_fft_swig.hwfft_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(hwfft_sptr self) -> int"""
        return _sync_fft_swig.hwfft_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(hwfft_sptr self, int m)"""
        return _sync_fft_swig.hwfft_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(hwfft_sptr self)"""
        return _sync_fft_swig.hwfft_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(hwfft_sptr self) -> bool"""
        return _sync_fft_swig.hwfft_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(hwfft_sptr self, int m)"""
        return _sync_fft_swig.hwfft_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(hwfft_sptr self) -> int"""
        return _sync_fft_swig.hwfft_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(hwfft_sptr self, int i) -> long"""
        return _sync_fft_swig.hwfft_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(hwfft_sptr self, long max_output_buffer)
        set_max_output_buffer(hwfft_sptr self, int port, long max_output_buffer)
        """
        return _sync_fft_swig.hwfft_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(hwfft_sptr self, int i) -> long"""
        return _sync_fft_swig.hwfft_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(hwfft_sptr self, long min_output_buffer)
        set_min_output_buffer(hwfft_sptr self, int port, long min_output_buffer)
        """
        return _sync_fft_swig.hwfft_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(hwfft_sptr self, int which) -> float
        pc_input_buffers_full(hwfft_sptr self) -> pmt_vector_float
        """
        return _sync_fft_swig.hwfft_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(hwfft_sptr self, int which) -> float
        pc_input_buffers_full_avg(hwfft_sptr self) -> pmt_vector_float
        """
        return _sync_fft_swig.hwfft_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(hwfft_sptr self, int which) -> float
        pc_input_buffers_full_var(hwfft_sptr self) -> pmt_vector_float
        """
        return _sync_fft_swig.hwfft_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(hwfft_sptr self, int which) -> float
        pc_output_buffers_full(hwfft_sptr self) -> pmt_vector_float
        """
        return _sync_fft_swig.hwfft_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(hwfft_sptr self, int which) -> float
        pc_output_buffers_full_avg(hwfft_sptr self) -> pmt_vector_float
        """
        return _sync_fft_swig.hwfft_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(hwfft_sptr self, int which) -> float
        pc_output_buffers_full_var(hwfft_sptr self) -> pmt_vector_float
        """
        return _sync_fft_swig.hwfft_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(hwfft_sptr self) -> float"""
        return _sync_fft_swig.hwfft_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(hwfft_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _sync_fft_swig.hwfft_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(hwfft_sptr self)"""
        return _sync_fft_swig.hwfft_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(hwfft_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _sync_fft_swig.hwfft_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(hwfft_sptr self) -> int"""
        return _sync_fft_swig.hwfft_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(hwfft_sptr self) -> int"""
        return _sync_fft_swig.hwfft_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(hwfft_sptr self, int priority) -> int"""
        return _sync_fft_swig.hwfft_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(hwfft_sptr self) -> std::string"""
        return _sync_fft_swig.hwfft_sptr_name(self)


    def symbol_name(self):
        """symbol_name(hwfft_sptr self) -> std::string"""
        return _sync_fft_swig.hwfft_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(hwfft_sptr self) -> io_signature_sptr"""
        return _sync_fft_swig.hwfft_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(hwfft_sptr self) -> io_signature_sptr"""
        return _sync_fft_swig.hwfft_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(hwfft_sptr self) -> long"""
        return _sync_fft_swig.hwfft_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(hwfft_sptr self) -> basic_block_sptr"""
        return _sync_fft_swig.hwfft_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(hwfft_sptr self, int ninputs, int noutputs) -> bool"""
        return _sync_fft_swig.hwfft_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(hwfft_sptr self) -> std::string"""
        return _sync_fft_swig.hwfft_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(hwfft_sptr self, std::string name)"""
        return _sync_fft_swig.hwfft_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(hwfft_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _sync_fft_swig.hwfft_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(hwfft_sptr self) -> swig_int_ptr"""
        return _sync_fft_swig.hwfft_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(hwfft_sptr self) -> swig_int_ptr"""
        return _sync_fft_swig.hwfft_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(hwfft_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _sync_fft_swig.hwfft_sptr_message_subscribers(self, which_port)

hwfft_sptr_swigregister = _sync_fft_swig.hwfft_sptr_swigregister
hwfft_sptr_swigregister(hwfft_sptr)


hwfft_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hwfft = hwfft.make;



